# Set some variables for convenience
substitutions:
  name: nsp_bathroom
  device_name: "nsp_bathroom"
  prefix: "nsp_bathroom" 
# Enable logging
esphome:
  name: $name
  comment: $device_name
  on_boot:
    priority: 601
    then:
      - lambda: id(disp1).send_command_printf("DRAKJHSUYDGBNCJHGJKSHBDN");
logger:
ota:
  password: "33ba8da3afc16873ef9b270235710659"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
#  manual_ip:
#    static_ip: 10.0.2.101
#    gateway: 10.0.2.1
#    subnet: 255.255.255.0
mqtt:
  broker: 10.0.3.116
  discovery: false
  id: mqtt_client
  topic_prefix: "nsp_bathroom" 
# Передача статуса в MQTT
  birth_message:
      topic: "esphome/nsp_bathroom/text_sensor/status/state"
      payload: online

  will_message:
      topic: "esphome/nsp_bathroom/text_sensor/status/state"
      payload: offline

  shutdown_message :
      topic: "esphome/nsp_bathroom/text_sensor/status/state"
      payload: shutdown
#time:
#  - platform: sntp
#    id: sntp_time
#    on_time:
#      - seconds: 0
#        minutes: '*'
#        then:
#          - lambda: |-
#              auto time_text = id(sntp_time).now().strftime("%H:%M");  
#              id(disp1).set_component_text_printf("main.b5", time_text.c_str());  
#              auto date_text = id(sntp_time).now().strftime("%d.%m.%Y");
#              id(disp1).set_component_text_printf("main.b6", date_text.c_str()); 
external_components:
  - source: github://pr#2956
    components: [nextion]
    refresh: 1h
esp32:
  board: esp32dev

# Enable Home Assistant API
api:
  encryption:
    key: "hK4c2Gwp0pSSLZ6pnWPSTwdwugWZVP2PDQ69vwld9XE="
  services:
    # Service to play a song
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'

# Define some inputs
script:
  - id: update_room
    then:
        - lambda: |-
            id(disp1).set_component_text("main.t0", id(ha_forecast_temp).state.c_str());
            id(disp1).set_component_text_printf("main.b10", id(wb_date).state.c_str()); 
            id(disp1).set_component_text_printf("main.b9", id(wb_time).state.c_str());             
            id(disp1).set_component_picc("main.b0", id(Button0).state);           
            id(disp1).set_component_picc("main.b1", id(Button1).state);            
            id(disp1).set_component_picc("main.b2", id(Button2).state);           
            id(disp1).set_component_picc("main.b3", id(Button3).state);   
            id(disp1).set_component_picc("main.b4", id(Button4).state);
            id(disp1).set_component_picc("main.b5", id(Button5).state);  
        - script.execute: update_forecast
  - id: update_forecast
    then:
        - lambda: |-
            id(disp1).set_component_text("main.t0", id(ha_forecast_temp).state.c_str());
            if (id(ha_forecast).state == "partlycloudy") { 
                id(disp1).set_component_pic("main.p0", 2);
                id(disp1).set_component_text("main.t1", "Переменная облачность");
            }
            else if (id(ha_forecast).state == "sunny"){
                id(disp1).set_component_pic("main.p0", 3);
                id(disp1).set_component_text("main.t1", "Солнечно");
            }
            else if (id(ha_forecast).state == "cloudy" or id(ha_forecast).state == "fog"){
                id(disp1).set_component_pic("main.p0", 4);
                id(disp1).set_component_text("main.t1", "Туман");
            }
            else if (id(ha_forecast).state == "hail" or id(ha_forecast).state == "pouring" or id(ha_forecast).state == "rainy"){
                id(disp1).set_component_pic("main.p0", 5);
                id(disp1).set_component_text("main.t1", "Дождь");
            }
            else if (id(ha_forecast).state == "lightning" or id(ha_forecast).state == "lightning-rainy"){
                id(disp1).set_component_pic("main.p0", 6);
                id(disp1).set_component_text("main.t1", "Гроза");
            }
            else if (id(ha_forecast).state == "snowy" or id(ha_forecast).state == "snowy-rainy"){
                id(disp1).set_component_pic("main.p0", 7);
                id(disp1).set_component_text("main.t1", "Снегопад");
            }
            else if (id(ha_forecast).state == "clear-night"){
                id(disp1).set_component_pic("main.p0", 8);
                id(disp1).set_component_text("main.t1", "Ясная ночь");
            }
            else if (id(ha_forecast).state == "exceptional"){
                id(disp1).set_component_pic("main.p0", 9);
                id(disp1).set_component_text("main.t1", "Ураган");
            }
            else if (id(ha_forecast).state == "windy"){
                id(disp1).set_component_pic("main.p0", 10);
                id(disp1).set_component_text("main.t1", "Ветрено");
            }
            else if (id(ha_forecast).state == "windy-variant"){
                id(disp1).set_component_pic("main.p0", 11);
                id(disp1).set_component_text("main.t1", "Ветрено");
            }
            else {
                id(disp1).set_component_pic("main.p0", 2);
                id(disp1).set_component_text("main.t1", "Переменная облачность");
            }
binary_sensor:
  - platform: nextion
    name: $device_name h1_slider
    page_id: 2
    component_id: 6
    internal: true
    on_release:
      then:
        - lambda: |-
            id(h1_slider_value).update();
  - platform: nextion
    name: $device_name bar_page_enable
    page_id: 2
    component_id: 0
    internal: true
    on_release:
      then:
        - lambda: |-
            id(disp1).set_component_value("bar.h1", id(h1_slider_value_mqtt).state);
            id(disp1).set_component_value("bar.n1", id(h1_slider_value_mqtt).state);
  - platform: nextion
    name: $device_name bar_page_enable
    page_id: 0
    component_id: 0
    internal: true
    on_release:
      then:
        - script.execute: update_room
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_click:
      
#споты, лента, лента, зеркало
        - lambda: |-
            id(mqtt_client).publish("/devices/wb-mdm3_216/controls/K1/on", "0");
            id(mqtt_client).publish("/devices/wb-mrgbw-d-fw3_182/controls/Channel 3 (G)/on", "0");
            id(mqtt_client).publish("/devices/wb-mrgbw-d-fw3_182/controls/Channel 2 (R)/on", "0");
            id(mqtt_client).publish("/devices/wb-mr6c_75/controls/K1/on", "0");    
  - platform: gpio
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true
    on_click:
#споты, лента, лента, зеркало
        - lambda: |-
            id(mqtt_client).publish("/devices/wb-mdm3_216/controls/K1/on", "1");
            id(mqtt_client).publish("/devices/wb-mrgbw-d-fw3_182/controls/Channel 3 (G)/on", "1");
            id(mqtt_client).publish("/devices/wb-mrgbw-d-fw3_182/controls/Channel 2 (R)/on", "1");
            id(mqtt_client).publish("/devices/wb-mr6c_75/controls/K1/on", "1");  
  - platform: nextion
  # споты ванна
    name: $device_name B0
    page_id: 0
    component_id: 1
    on_press:
      then:
        - lambda: |-
            if (id(Button0).state == 1) { 
                id(mqtt_client).publish("/devices/wb-mdm3_216/controls/K1/on", "0");
              }
            else {
                id(mqtt_client).publish("/devices/wb-mdm3_216/controls/K1/on", "1");
            }
  - platform: nextion
  # зеркало ванна
    name: $device_name B1
    page_id: 0
    component_id: 2
    on_press:
      then:
        - lambda: |-
            if (id(Button1).state == 1) { 
                id(mqtt_client).publish("/devices/wb-mr6c_75/controls/K1/on", "0");
              }
            else {
                id(mqtt_client).publish("/devices/wb-mr6c_75/controls/K1/on", "1");
            }
  - platform: nextion
    # вытяжка ванна
    name: $device_name B2
    page_id: 0
    component_id: 3
    on_press:
      then:
        - lambda: |-
            if (id(Button2).state == 1) { 
                id(mqtt_client).publish("/devices/wb-mr6c_75/controls/K2/on", "0");
              }
            else {
                id(mqtt_client).publish("/devices/wb-mr6c_75/controls/K2/on", "1");
            }
  - platform: nextion
    # подсветка ванна
    name: $device_name B3
    page_id: 0
    component_id: 4
    on_press:
      then:
        - lambda: |-
            if (id(Button3).state == 1 or id(Button3_1).state == 1) { 
                id(mqtt_client).publish("/devices/wb-mrgbw-d-fw3_182/controls/Channel 3 (G)/on", "0");
                id(mqtt_client).publish("/devices/wb-mrgbw-d-fw3_182/controls/Channel 2 (R)/on", "0");
              }
            else {
                id(mqtt_client).publish("/devices/wb-mrgbw-d-fw3_182/controls/Channel 3 (G)/on", "1");
                id(mqtt_client).publish("/devices/wb-mrgbw-d-fw3_182/controls/Channel 2 (R)/on", "1");
            }
  - platform: nextion
    # коридор1
    name: $device_name B4
    page_id: 0
    component_id: 5
    on_press:
      then:
        - lambda: |-
            if (id(Button4).state == 1) { 
                id(mqtt_client).publish("/devices/wb-mdm3_27/controls/K3/on", "0");
              }
            else {
                id(mqtt_client).publish("/devices/wb-mdm3_27/controls/K3/on", "1");
            }
  - platform: nextion
    # коридор2
    name: $device_name B5
    page_id: 0
    component_id: 6
    on_press:
      then:
        - lambda: |-
            if (id(Button5).state == 1) { 
                id(mqtt_client).publish("/devices/wb-mdm3_27/controls/K2/on", "0");
              }
            else {
                id(mqtt_client).publish("/devices/wb-mdm3_27/controls/K2/on", "1");
            }
  - platform: nextion
    name: $device_name screensaver
    page_id: 1
    component_id: 0
    on_press:
      then:
        - lambda: |-
            id(mqtt_client).publish("/devices/nsp_bathroom/controls/Screen/on", "1");
 #       - script.execute: update_room     
text_sensor:
  - platform: mqtt_subscribe
    name: "ha_forecast"
    id: ha_forecast
    topic: homeassistant/sensor/weather/weather
    on_value:
      then:
         - script.execute: update_forecast
  - platform: mqtt_subscribe
    name: "ha_forecast_temp"
    id: ha_forecast_temp
    topic: homeassistant/sensor/weather/temp
    on_value:
      then:
        - lambda: |-
            id(disp1).set_component_text("main.t0", id(ha_forecast_temp).state.c_str());
  - platform: mqtt_subscribe
    name: "Дата"
    id: wb_date
    topic: /devices/date_time/controls/date
    on_value:
      then:
        - lambda: |-
            id(disp1).set_component_text_printf("main.b10", id(wb_date).state.c_str()); 
  - platform: mqtt_subscribe
    name: "Время"
    id: wb_time
    topic: /devices/date_time/controls/time
    on_value:
      then:
        - lambda: |-
            id(disp1).set_component_text_printf("main.b9", id(wb_time).state.c_str()); 
sensor:
  - platform: nextion
    id: h1_slider_value
    component_name: h1
    on_value:
      then:
        - lambda: |-
            id(mqtt_client).publish("/devices/wb-mdm3_216/controls/Channel 1/on", esphome::to_string(id(h1_slider_value).state));
  - platform: mqtt_subscribe
    internal: true
    name: "h1_slider_value_mqtt"
    id: h1_slider_value_mqtt
    topic: /devices/wb-mdm3_216/controls/Channel 1
    on_value:
      then:
        - lambda: |-
            id(disp1).set_component_value("bar.h1", id(h1_slider_value_mqtt).state);
            id(disp1).set_component_value("bar.n1", id(h1_slider_value_mqtt).state);
  - platform: mqtt_subscribe
    internal: true
    name: "Button0"
    id: Button0
    topic: /devices/wb-mdm3_216/controls/K1
    on_value:
      then: 
        - lambda: |-
            id(disp1).set_component_picc("main.b0", id(Button0).state);
  - platform: mqtt_subscribe
    internal: true
    name: "Button1"
    id: Button1
    topic: /devices/wb-mr6c_75/controls/K1
    on_value:
      then: 
        - lambda: |-
            id(disp1).set_component_picc("main.b1", id(Button1).state);
  - platform: mqtt_subscribe
    internal: true
    name: "Button2"
    id: Button2
    topic: /devices/wb-mr6c_75/controls/K2
    on_value:
      then: 
        - lambda: |-
            id(disp1).set_component_picc("main.b2", id(Button2).state);
  - platform: mqtt_subscribe
    internal: true
    name: "Button3"
    id: Button3
    topic: /devices/wb-mrgbw-d-fw3_182/controls/Channel 3 (G)
    on_value:
      then: 
        - lambda: |-
            id(disp1).set_component_picc("main.b3", id(Button3).state);
  - platform: mqtt_subscribe
    internal: true
    name: "Button3_1"
    id: Button3_1
    topic: /devices/wb-mrgbw-d-fw3_182/controls/Channel 2 (R)
    on_value:
      then: 
        - lambda: |-
            id(disp1).set_component_picc("main.b3", id(Button3_1).state);
  - platform: mqtt_subscribe
    internal: true
    name: "Button4"
    id: Button4
    topic: /devices/wb-mdm3_27/controls/K3
    on_value:
      then: 
        - lambda: |-
            id(disp1).set_component_picc("main.b4", id(Button4).state);
  - platform: mqtt_subscribe
    internal: true
    name: "Button5"
    id: Button5
    topic: /devices/wb-mdm3_27/controls/K2/on
    on_value:
      then: 
        - lambda: |-
            id(disp1).set_component_picc("main.b5", id(Button5).state);
#  - platform: mqtt_subscribe
#    name: "bedroom2_lux_sens"
#    id: bedroom2_lux_sens
#    topic: /devices/wb-msw-v3_140/controls/Illuminance
#  - platform: mqtt_subscribe
#    name: "bedroom2_motion_sens"
#    id: bedroom2_motion_sens
#    topic: /devices/wb-msw-v3_140/controls/Max Motion
#    on_value:
#      then: 
#        - lambda: |-
#            if (id(Buttonedroom2_motion_sens).state > 160) {
#                if (id(Buttonedroom2_lux_sens).state > 20) {
#                id(disp1).set_backlight_brightness(1.0);
#                } else {id(disp1).set_backlight_brightness(0.2);}
#            id(disp1).set_component_value("main.sleep_display.en", 1);
#            }
#  - platform: mqtt_subscribe
#    internal: true
#    name: "nsp_bathroom_backlight"
#    id: nsp_bathroom_backlight
#    topic: /devices/nsp_bathroom/controls/Backlight
#    on_value:
#      then: 
#        - lambda: |-
#            if (id(nsp_bathroom_screen).state == 1) {
#            id(disp1).set_backlight_brightness(id(nsp_bathroom_backlight).state/100); 
#            }
  - platform: mqtt_subscribe
    internal: true
    name: "nsp_bathroom_screen"
    id: nsp_bathroom_screen
    topic: /devices/nsp_bathroom/controls/Screen
    on_value:
      then: 
        - lambda: |-
            if (id(nsp_bathroom_screen).state == 1) { 
                id(disp1).goto_page("main");
                id(disp1).set_component_text("main.t0", id(ha_forecast_temp).state.c_str());
                id(disp1).set_component_text_printf("main.b10", id(wb_date).state.c_str()); 
                id(disp1).set_component_text_printf("main.b9", id(wb_time).state.c_str());             
                id(disp1).set_component_picc("main.b0", id(Button0).state);           
                id(disp1).set_component_picc("main.b1", id(Button1).state);            
                id(disp1).set_component_picc("main.b2", id(Button2).state);           
                id(disp1).set_component_picc("main.b3", id(Button3).state);   
                id(disp1).set_component_picc("main.b4", id(Button4).state);
                id(disp1).set_component_picc("main.b5", id(Button5).state);
 
              }
            else {
                id(disp1).set_backlight_brightness(0);
                id(disp1).goto_page("screensaver");
            } 
  - platform: wifi_signal
    name: $device_name WiFi Signal
    update_interval: 60s
  # Internal temperature sensor, adc value
  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db    
  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm
  # Internal temperature sensor, resistance to temperature (calculation)
  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: $device_name Temperature
    on_value:
        - lambda: id(disp1).set_component_text_printf("main.t4", "%.1f C", id(temperature).state);
  # Pin 4 always needs to be on to power up the display
switch:
  - platform: gpio
    name: "ScreenPower"
    id: screen_power
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON
#time:
#  - platform: homeassistant
#    id: homeassistant_time
#    on_time:
#      - seconds: 0
#        minutes: /1
#        then:
#          - lambda: id(disp1).set_component_text_printf("main.b5", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
number:
  platform: template
  name: $device_name Brightness
  id: brightness
  entity_category: config
  unit_of_measurement: '%'
  min_value: 0
  max_value: 100
  step: 1
  initial_value: 30
  set_action:
    then:
      - lambda: 'id(disp1).set_backlight_brightness(x/100);'

# Configure the internal bleeper
output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

# Enable ringtone music support
rtttl:
  id: buzzer
  output: buzzer_out

# Configure UART for communicating with the screen
uart:
  id: tf_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

# Configure the screen itself
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: https://10.0.3.100:8123/local/bath3.tft
    # A little fun...
    on_setup:
      then:
        - number.set:
            id: brightness
            value: 30
 #       - lambda: |-
 #           id(disp1).send_command_print("main.temp_room.txt", "%.1f ""\xb0""F", id(current_temperature).state);
        #- rtttl.play: "twobits:d=4,o=5,b=220:c6,8g,8g,a,g,p,b,c6"